
#ifndef PyImgC_PYIMGC_IMP_NUMBERPROTOCOL_H
#define PyImgC_PYIMGC_IMP_NUMBERPROTOCOL_H

#include <Python.h>
#include <numpy/ndarrayobject.h>
#include "numpypp/numpy.hpp"
#include "numpypp/dispatch.hpp"
#include "numpypp/utils.hpp"
#include "PyImgC_IMP_Operators.h"

using namespace cimg_library;
using namespace std;

int PyCImage_Compare(PyObject *smelf, PyObject *smother);
int PyCImage_NonZero(PyObject *smelf);

DECLARE_BINARY_OP(ADD);
DECLARE_BINARY_OP(SUBTRACT);
DECLARE_BINARY_OP(MULTIPLY);
DECLARE_BINARY_OP(DIVIDE);
DECLARE_BINARY_OP(REMAINDER);
/* DECLARE_BINARY_OP(DIVMOD); */
/* DECLARE_BINARY_OP(POWER); */
DECLARE_BINARY_OP(LSHIFT);
DECLARE_BINARY_OP(RSHIFT);
DECLARE_BINARY_OP(AND);
DECLARE_BINARY_OP(XOR);
DECLARE_BINARY_OP(OR);

DECLARE_BINARY_OP(INPLACE_ADD);
DECLARE_BINARY_OP(INPLACE_SUBTRACT);
DECLARE_BINARY_OP(INPLACE_MULTIPLY);
DECLARE_BINARY_OP(INPLACE_DIVIDE);
DECLARE_BINARY_OP(INPLACE_REMAINDER);
DECLARE_BINARY_OP(INPLACE_POWER);
DECLARE_BINARY_OP(INPLACE_LSHIFT);
DECLARE_BINARY_OP(INPLACE_RSHIFT);
DECLARE_BINARY_OP(INPLACE_AND);
DECLARE_BINARY_OP(INPLACE_XOR);
DECLARE_BINARY_OP(INPLACE_OR);

DECLARE_BINARY_OP(FLOOR_DIVIDE);
DECLARE_BINARY_OP(TRUE_DIVIDE);
DECLARE_BINARY_OP(INPLACE_FLOOR_DIVIDE);
DECLARE_BINARY_OP(INPLACE_TRUE_DIVIDE);

/// Unary Op Declaration Macros
DECLARE_UNARY_OP(NEGATIVE);
DECLARE_UNARY_OP(POSITIVE);
DECLARE_UNARY_OP(INVERT);
DECLARE_UNARY_OP(ABSOLUTE);
DECLARE_UNARY_OP(INT);
DECLARE_UNARY_OP(LONG);
DECLARE_UNARY_OP(FLOAT);
DECLARE_UNARY_OP(INDEX);

#endif /// PyImgC_PYIMGC_IMP_NUMBERPROTOCOL_H